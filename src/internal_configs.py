from utils.version_styles import git_tags, interval_versions

version_getter = git_tags  # git_tags  # interval_versions

"""
THIS SECTION DOES NOT CHANGE
"""

git_metrics = ['commits_loc_added', 'commits_loc_removed', 'commits_code_churn', 'n_commits']

pkg_metrics = ['pkg_files', 'pkg_loc', 'pkg_tokens', 'pkg_cc', 'pkg_average_loc', 'pkg_average_cc',
               'pkg_average_tokens']

arch_refactoring_types = ['extract_method', 'pull_up_method', 'move_method', 'extract_and_move_method', 'inline_method',
                          'push_down_method', 'extract_superclass', 'extract_class', 'move_class', 'extract_subclass',
                          'extract_interface', 'change_package', 'move_and_inline_method', 'move_and_rename_class',
                          'move_and_rename_method', 'move_source_folder', 'rename_package', 'rename_method']
arch_refactoring_types.sort()


all_refactoring_types = ['add_attribute_annotation', 'add_attribute_modifier', 'add_class_annotation',
                         'add_method_annotation', 'add_method_modifier', 'add_parameter', 'add_parameter_annotation',
                         'add_parameter_modifier', 'add_thrown_exception_type', 'add_variable_annotation',
                         'add_variable_modifier', 'change_attribute_access_modifier', 'change_attribute_type',
                         'change_method_access_modifier', 'change_package', 'change_parameter_type',
                         'change_return_type', 'change_thrown_exception_type', 'change_variable_type',
                         'encapsulate_attribute', 'extract_and_move_method', 'extract_attribute', 'extract_class',
                         'extract_interface', 'extract_method', 'extract_subclass', 'extract_superclass',
                         'extract_variable', 'inline_method', 'inline_variable', 'merge_attribute', 'merge_parameter',
                         'merge_variable', 'modify_attribute_annotation', 'modify_class_annotation',
                         'modify_method_annotation', 'modify_parameter_annotation', 'modify_variable_annotation',
                         'move_and_inline_method', 'move_and_rename_attribute', 'move_and_rename_class',
                         'move_and_rename_method', 'move_attribute', 'move_class', 'move_method', 'move_source_folder',
                         'parameterize_attribute', 'parameterize_variable', 'pull_up_attribute', 'pull_up_method',
                         'push_down_attribute', 'push_down_method', 'remove_attribute_annotation',
                         'remove_attribute_modifier', 'remove_class_annotation', 'remove_method_annotation',
                         'remove_method_modifier', 'remove_parameter', 'remove_parameter_annotation',
                         'remove_parameter_modifier', 'remove_thrown_exception_type', 'remove_variable_annotation',
                         'remove_variable_modifier', 'rename_attribute', 'rename_class', 'rename_method',
                         'rename_parameter', 'rename_variable', 'reorder_parameter', 'replace_attribute',
                         'replace_attribute_with_variable', 'replace_variable_with_attribute', 'split_attribute',
                         'split_parameter', 'split_variable']
all_refactoring_types.sort()

all_smell_types = [
    'empty_catch_clause',
    'abstract_function_call_from_constructor',
    'cyclic_dependency',
    'unstable_dependency',
    'ambiguous_interface',
    'god_component',
    'feature_concentration',
    'scattered_functionality',
    'dense_structure',
    'imperative_abstraction',
    'unnecessary_abstraction',
    'multifaceted_abstraction',
    'unutilized_abstraction',
    'duplicate_abstraction',
    'feature_envy',
    'deficient_encapsulation',
    'unexploited_encapsulation',
    'broken_modularization',
    'insufficient_modularization',
    'hub-like_modularization',
    'cyclically-dependent_modularization',
    'wide_hierarchy',
    'deep_hierarchy',
    'multipath_hierarchy',
    'cyclic_hierarchy',
    'rebellious_hierarchy',
    'unfactored_hierarchy',
    'missing_hierarchy',
    'broken_hierarchy',
    'long_method',
    'complex_method',
    'long_parameter_list',
    'long_identifier',
    'long_statement',
    'complex_conditional',
    # 'virtual_method_call_from_constructor',
    # 'empty_catch_block',
    'magic_number',
    'duplicate_code',
    'missing_default'
]
all_smell_types.sort()

feature_selected_types = [
    'pkg_files',
    'pkg_loc',
    'pkg_tokens',
    'pkg_cc',
    'pkg_average_loc',
    'pkg_average_cc',
    'pkg_average_tokens',
    'add_class_annotation',
    'add_method_annotation',
    'add_parameter',
    'add_thrown_exception_type',
    'change_attribute_type',
    'change_method_access_modifier',
    'change_parameter_type',
    'change_return_type',
    'change_variable_type',
    'extract_and_move_method',
    'extract_attribute',
    'extract_method',
    'extract_variable',
    'inline_method',
    'inline_variable',
    'move_and_rename_method',
    'move_attribute',
    'move_class',
    'move_method',
    'pull_up_attribute',
    'pull_up_method',
    'remove_method_annotation',
    'remove_parameter',
    'remove_thrown_exception_type',
    'rename_attribute',
    'rename_class',
    'rename_method',
    'rename_parameter',
    'rename_variable',
    'abstract_function_call_from_constructor',
    'broken_hierarchy',
    'broken_modularization',
    'complex_conditional',
    'complex_method',
    'cyclic_dependency',
    'cyclic_hierarchy',
    'cyclically-dependent_modularization',
    'deficient_encapsulation',
    'empty_catch_clause',
    'feature_envy',
    'god_component',
    'hub-like_modularization',
    'imperative_abstraction',
    'insufficient_modularization',
    'long_identifier',
    'long_method',
    'long_parameter_list',
    'long_statement',
    'magic_number',
    'missing_default',
    'missing_hierarchy',
    'multifaceted_abstraction',
    'rebellious_hierarchy',
    'scattered_functionality',
    'unexploited_encapsulation',
    'unnecessary_abstraction',
    'unstable_dependency',
    'unutilized_abstraction',
    'wide_hierarchy',
]


if __name__ == '__main__':
    print('No main functionality')
